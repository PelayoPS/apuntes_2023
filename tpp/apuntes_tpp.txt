programming language:
    artificial language that a computer can execute
    make human abstraction closer to machine abstraction
    close to human = higher level
language translator:
    translates source programs into another language
compiler:
    translates high-level programs into low-level machine code
interpreter:
    executes programs in a specific programming language
=================================================================

Programming language classification:
    features for classification:
        - Abstraction level
        - Domain
        - Concurrency support
        - Implementation(compiled or interpreted)
        - When type checking is performed (compiled or interpreted)
        - How the source code is represented

1. Abstraction(high/low)
    closer to human level = higher
    closer to computer level = lower
    assembly and machine code -> low-level
    C -> medium-level
    the rest(java python...) -> high-level
    Domain Specific Languages(DSLs[example: SQL]) -> even higher level
 
2. Domain
    DSLs -> SQL Logo R ...
    General-purpose -> java c++ python ...
    more specific than DSLs -> Model Driven Development(MDD) and Domain Specific Modelling(DSM)

3. Concurrency support
    creation of programs with processes working in parallel(threads)
    can be executed:
        in a single processor
        in parallel
4. Implementation
    compiled or interpreted
    not mutually exclusive(Java and C# are compiled and "interpreted")
    JIT(Just in Time) is a hybrid approach

5. Type checking
    static:
        earlier type error detection(compile time)
        better runtime performance
    dynamic:
        runtime adaptability and flexibility

6. Dynamic and Scripting languages:
    Scripting:
        automate execution of tasks
    Dynamic:
        fully built application

7. Source code representation
    Visual language:
        like unreal engine
    Textual:
        source code as text
    
========================================================================

Programming paradigms
    definition: 
        approach to solve programming problems based on abstraction and 
        concepts used to represent programs

Impertative vs Declarative
    Impertative:
        instructions are closer to machine language so higher level
    Declarative:
        closer to human level as what should be accomplished is described

Main Paradigms
    Structural Procedural-based:
        sometimes referred to as Impertative
        is Structured + Procedural
        three control flow structures: sequential, conditional and iterative:
            jump instructions are avoided
            improves readability and maintainability
            control flow structures canbe nested
        Procedural paradigm defines procedure or subrutine as main mechanism
        of reutilization
        includes the existing structured paradigm
        includes the concept of variable scope
        procedure that returns a value is called a function
        functions can have:
            side effects
            higher order functions are not commonly supported
            closures functions are not commonly supported
            



